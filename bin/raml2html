#!/usr/bin/env node

'use strict';

const chalk = require('chalk');
const fs = require('fs');
const path = require('path');
const yargs = require('yargs');
const raml2html = require('..');
const pjson = require('../package.json');

const argv = yargs
  .usage('Usage: raml2html [options] [RAML input file]')
  .version(pjson.version)

  .help('h')
  .alias('h', 'help')

  .string('i')
  .alias('i', 'input')
  .describe('i', 'Input file')

  .string('o')
  .alias('o', 'output')
  .describe('o', 'Output file')

  .string('t')
  .alias('t', 'template')
  .describe('t', 'Template path')

  .boolean('p')
  .alias('p', 'pretty')
  .describe('p', 'Pretty output (non-minified)')

  .boolean('v')
  .alias('v', 'validate')
  .describe('v', 'Validate RAML (off by default)')

  .array('e')
  .alias('e', 'extensionsAndOverlays')
  .describe('e', 'Extensions and overlays paths')

  .string('theme')
  .describe('theme', 'Theme name')

  .example('raml2html example.raml > example.html')
  .example('raml2html --template my-template.nunjucks -i example.raml -o example.html')
  .example('raml2html --theme raml2html-markdown-theme example.raml > example.html')
  .example('raml2html -v example.raml > example.html')
  .example('raml2html -e extension.raml overlay.raml -i example.raml -o example.html')
  .argv;

let input = argv.input;

if (!input) {
  if (argv._.length !== 1) {
    console.error('Error: You need to specify the RAML input file\n');
    yargs.showHelp();
    process.exit(1);
  }

  input = argv._[0];
}

let config;
if (argv.template) {
  config = raml2html.getConfigForTemplate(argv.template);
} else {
  config = raml2html.getConfigForTheme(argv.theme, argv);
}

function writeOutput(result, config, argv) {
  return new Promise((resolve, reject) => {
    if (argv.output) {
      fs.writeFile(argv.output, result, err => {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    } else {
      // Simply output to console
      process.stdout.write(result, resolve);
    }
  });
}

function errorPath(error) {
  const dir = path.dirname(input);

  return [
    path.join(dir, error.path),
    error.range.start.line,
    error.range.start.column,
  ].join(':');
}

function errorMessage(error) {
  return `${error.code}: ${error.message}`;
}

function errorStackTrace(error, nocolor) {
  let message = `${errorMessage(error)} (${errorPath(error)})`;

  if (!nocolor) {
    if (error.isWarning) {
      message = chalk.yellow(message);
    } else {
      message = chalk.red(message);
    }
  }

  if (error.trace) {
    message += '\n  ' + errorStackTrace(error.trace[0], true);
  }

  return message;
}

function writeParserErrors(parserErrors) {
  parserErrors.forEach(error => {
    console.error(errorStackTrace(error));
  });
}

// Start the rendering process
raml2html
  .render(input, config, argv)
  .then(result => {
    return (config.writeOutput || writeOutput)(result, config, argv);
  })
  .then(() => process.exit(0))
  .catch(error => {
    if (error.message) {
      console.error(chalk.bgRed(error.message) + '\n');
    }

    if (error.parserErrors) {
      let parserErrors = error.parserErrors;

      if (argv.suppressWarnings) {
        parserErrors = parserErrors.filter(error => !error.isWarning);
      }

      if (argv.rawErrors) {
        console.error(JSON.stringify(parserErrors, null, 2));
      } else {
        writeParserErrors(parserErrors);
      }
    }

    process.exit(1);
  });
